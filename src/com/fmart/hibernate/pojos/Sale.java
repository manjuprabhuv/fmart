package com.fmart.hibernate.pojos;

// Generated Mar 28, 2015 8:26:51 PM by Hibernate Tools 3.4.0.CR1

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlTransient;

import org.codehaus.jackson.annotate.JsonBackReference;
import org.codehaus.jackson.annotate.JsonIgnore;
import org.codehaus.jackson.annotate.JsonManagedReference;

/**
 * Sale generated by hbm2java
 */
@Entity
@Table(name = "sale", schema = "fmart")
public class Sale implements java.io.Serializable, Comparable<Sale> {

	private int id;

	private Company company;
	private Customer customer;
	private BigDecimal amount;
	private BigDecimal advance;
	private String status;
	private List<SaleDetail> saleDetails = new ArrayList<SaleDetail>();
	private Set<Receipt> receipts = new HashSet<Receipt>(0);

	private String customer_name;
	private String company_name;
	private String employeeByUpdatedBy_name;
	private String employeeByCreatedBy_name;

	private boolean updateable;
	private BigDecimal commission;
	private BigDecimal cost_amount;

	public Sale() {

		this.created = new Date();
	}

	public Sale(int id) {
		this.id = id;
	}

	public Sale(int id, Employee employeeByEmployeeId, Customer customer,
			Employee employeeByCreatedBy, Company company,
			BigDecimal amount, BigDecimal advance, String status,
			List<SaleDetail> saleDetails, Set<Receipt> receipts) {
		this.id = id;
		this.customer = customer;
		this.company = company;
		this.amount = amount;
		this.advance = advance;
		this.status = status;
		this.saleDetails = saleDetails;
		this.receipts = receipts;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@JsonBackReference
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "company_id")
	public Company getCompany() {
		return this.company;
	}

	public void setCompany(Company company) {
		this.company = company;
		this.company_name = company.getName();
	}

	@Column(name = "amount", precision = 10)
	public BigDecimal getAmount() {
		return this.amount;
	}

	public void setAmount(BigDecimal amount) {
		this.amount = amount;
	}

	@Column(name = "advance", precision = 10)
	public BigDecimal getAdvance() {
		return this.advance;
	}

	public void setAdvance(BigDecimal advance) {
		this.advance = advance;
	}

	@Column(name = "status", length = 15)
	public String getStatus() {
		return this.status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	@JsonManagedReference
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "sale", cascade = { CascadeType.ALL })
	public List<SaleDetail> getSaleDetails() {
		return this.saleDetails;
	}

	public void setSaleDetails(List<SaleDetail> saleDetails) {
		if (saleDetails != null)
			for (SaleDetail saleDetail : saleDetails)
				saleDetail.setSale(this);
		this.saleDetails = saleDetails;
	}

	@JsonManagedReference
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "sale", cascade = { CascadeType.ALL })
	public Set<Receipt> getReceipts() {
		return this.receipts;
	}

	public void setReceipts(Set<Receipt> receipts) {
		if (receipts != null)
			for (Receipt receipt : receipts)
				receipt.setSale(this);
		this.receipts = receipts;
	}

	private Employee employeeByUpdatedBy;
	private Employee employeeByCreatedBy;
	private Date created;
	private Date updated;

	@JsonBackReference
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "created_by")
	public Employee getEmployeeByCreatedBy() {
		return this.employeeByCreatedBy;
	}

	public void setEmployeeByCreatedBy(Employee employeeByCreatedBy) {
		this.employeeByCreatedBy = employeeByCreatedBy;
		this.employeeByCreatedBy_name = employeeByCreatedBy.getName();
	}

	@JsonBackReference
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "updated_by")
	public Employee getEmployeeByUpdatedBy() {
		return this.employeeByUpdatedBy;
	}

	public void setEmployeeByUpdatedBy(Employee employeeByUpdatedBy) {
		this.employeeByUpdatedBy = employeeByUpdatedBy;
		this.employeeByUpdatedBy_name = employeeByUpdatedBy.getName();
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", length = 35)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updated", length = 35)
	public Date getUpdated() {
		return this.updated;
	}

	public void setUpdated(Date updated) {
		this.updated = updated;
	}

	@XmlTransient
	@JsonIgnore
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "customer_id")
	public Customer getCustomer() {
		return this.customer;
	}

	public void setCustomer(Customer customer) {
		this.customer = customer;
		this.customer_name = customer.getName();
	}

	@Override
	public int compareTo(Sale o) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Transient
	@XmlTransient
	@JsonIgnore
	public String getCustomer_name() {
		return customer_name;
	}

	public void setCustomer_name(String customer_name) {
		this.customer_name = customer_name;
	}

	@Transient
	@XmlTransient
	@JsonIgnore
	public String getCompany_name() {
		return company_name;
	}

	public void setCompany_name(String company_name) {
		this.company_name = company_name;
	}

	@Transient
	@XmlTransient
	@JsonIgnore
	public String getEmployeeByUpdatedBy_name() {
		return employeeByUpdatedBy_name;
	}

	public void setEmployeeByUpdatedBy_name(String employeeByUpdatedBy_name) {
		this.employeeByUpdatedBy_name = employeeByUpdatedBy_name;
	}

	@Transient
	@XmlTransient
	@JsonIgnore
	public String getEmployeeByCreatedBy_name() {
		return employeeByCreatedBy_name;
	}

	public void setEmployeeByCreatedBy_name(String employeeByCreatedBy_name) {
		this.employeeByCreatedBy_name = employeeByCreatedBy_name;
	}

	@Transient
	@XmlTransient
	@JsonIgnore
	public boolean isUpdateable() {
		long diff = (new Date()).getTime() - created.getTime();
		if (TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS) > 90)
			return false;
		return true;
	}

	public void setUpdateable(boolean updateable) {
		this.updateable = updateable;
	}

	@Transient
	@XmlTransient
	@JsonIgnore
	public BigDecimal getCommission() {
		return commission.setScale(2, RoundingMode.CEILING);
	}

	public void setCommission(BigDecimal commission) {
		this.commission = commission;
	}

	@Transient
	@XmlTransient
	@JsonIgnore
	public BigDecimal getCost_amount() {
		return cost_amount;
	}

	public void setCost_amount(BigDecimal cost_amount) {
		this.cost_amount = cost_amount;
	}

	
}
